// Mocks generated by Mockito 5.4.4 from annotations
// in amaravati_chamber/test/features/news/presentation/widgets/news_content_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:amaravati_chamber/core/voting/domain/repositories/i_voting_repository.dart'
    as _i6;
import 'package:amaravati_chamber/features/news/presentation/bloc/news_cubit.dart'
    as _i3;
import 'package:amaravati_chamber/features/news/presentation/bloc/news_state.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNewsState_0 extends _i1.SmartFake implements _i2.NewsState {
  _FakeNewsState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NewsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsCubit extends _i1.Mock implements _i3.NewsCubit {
  @override
  String get selectedTag => (super.noSuchMethod(
        Invocation.getter(#selectedTag),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#selectedTag),
        ),
        returnValueForMissingStub: _i4.dummyValue<String>(
          this,
          Invocation.getter(#selectedTag),
        ),
      ) as String);

  @override
  Set<String> get allTags => (super.noSuchMethod(
        Invocation.getter(#allTags),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  _i2.NewsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNewsState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNewsState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.NewsState);

  @override
  _i5.Stream<_i2.NewsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.NewsState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.NewsState>.empty(),
      ) as _i5.Stream<_i2.NewsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Future<void> filterByTag(String? tag) => (super.noSuchMethod(
        Invocation.method(
          #filterByTag,
          [tag],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadNews() => (super.noSuchMethod(
        Invocation.method(
          #loadNews,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> loadMoreArticles() => (super.noSuchMethod(
        Invocation.method(
          #loadMoreArticles,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void searchArticles(String? query) => super.noSuchMethod(
        Invocation.method(
          #searchArticles,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> searchAllArticles(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchAllArticles,
          [query],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateVoteAndRefresh({
    required String? articleId,
    required _i6.VoteType? voteType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVoteAndRefresh,
          [],
          {
            #articleId: articleId,
            #voteType: voteType,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateVoteOnly({
    required String? articleId,
    required _i6.VoteType? voteType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVoteOnly,
          [],
          {
            #articleId: articleId,
            #voteType: voteType,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void emit(_i2.NewsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i7.Change<_i2.NewsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
