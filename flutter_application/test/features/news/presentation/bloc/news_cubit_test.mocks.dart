// Mocks generated by Mockito 5.4.4 from annotations
// in amaravati_chamber/test/features/news/presentation/bloc/news_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:amaravati_chamber/core/voting/domain/repositories/i_voting_repository.dart'
    as _i6;
import 'package:amaravati_chamber/features/news/domain/entities/news_article.dart'
    as _i5;
import 'package:amaravati_chamber/features/news/domain/repositories/i_news_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [INewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockINewsRepository extends _i1.Mock implements _i3.INewsRepository {
  MockINewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<String, List<_i5.NewsArticle>>> getNewsArticles({
    int? page = 1,
    int? itemsPerPage = 10,
    String? searchQuery,
    String? tagFilter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNewsArticles,
          [],
          {
            #page: page,
            #itemsPerPage: itemsPerPage,
            #searchQuery: searchQuery,
            #tagFilter: tagFilter,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<String, List<_i5.NewsArticle>>>.value(
                _FakeEither_0<String, List<_i5.NewsArticle>>(
          this,
          Invocation.method(
            #getNewsArticles,
            [],
            {
              #page: page,
              #itemsPerPage: itemsPerPage,
              #searchQuery: searchQuery,
              #tagFilter: tagFilter,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i5.NewsArticle>>>);
}

/// A class which mocks [IVotingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIVotingRepository extends _i1.Mock implements _i6.IVotingRepository {
  MockIVotingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<String, bool>> vote({
    required String? entityId,
    required _i6.EntityType? entityType,
    required _i6.VoteType? voteType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #vote,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
            #voteType: voteType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<String, bool>>.value(
            _FakeEither_0<String, bool>(
          this,
          Invocation.method(
            #vote,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
              #voteType: voteType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<String, bool>>);

  @override
  _i4.Future<_i2.Either<String, Map<String, int>>> getVoteCounts({
    required String? entityId,
    required _i6.EntityType? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVoteCounts,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<String, Map<String, int>>>.value(
            _FakeEither_0<String, Map<String, int>>(
          this,
          Invocation.method(
            #getVoteCounts,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<String, Map<String, int>>>);

  @override
  _i4.Future<_i2.Either<String, _i6.VoteType?>> getUserVote({
    required String? entityId,
    required _i6.EntityType? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserVote,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<String, _i6.VoteType?>>.value(
            _FakeEither_0<String, _i6.VoteType?>(
          this,
          Invocation.method(
            #getUserVote,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i6.VoteType?>>);
}
